#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Initialize the LCD (Update I2C address if needed)
LiquidCrystal_I2C lcd(0x27, 20, 4);

// Define states
enum State { WAITING, RAMP_UP, RUNNING, RAMP_DOWN };
State state = WAITING; // Initial state

// Pins and constants
const int motor_gate_pin = 5;  // PWM output to motor driver
const int comparator_pin = 2;  // Input from comparator
const float max_RPM = 1500.0;  // Max RPM

// Timing
const unsigned long comparator_sample_interval = 100;
const unsigned long RAMP_UP_TIME = 5000;  // 5s ramp-up
float duration = 0;   // User-specified time

// PID controller variables
float set_RPM = 0;
float measured_RPM = 0;
float error = 0, integral = 0, derivative = 0, previous_error = 0;
float pid_output = 0, baseline_duty = 0, pwm_value = 0;

// PID tuning
float Kp = 0.03, Ki = 0.0008, Kd = 0.0005;
const float INTEGRAL_CLAMP = 1000.0;

// Timing variables
unsigned long start_time = 0, ramp_up_start_time = 0, last_pid_time = 0;
volatile int comparator_counter = 0;
int comparator_counter_previous = 0;
const float magnet = 2.0;  // Adjust for magnet count

void comparatorInterruptHandler() {
  comparator_counter++;
}

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.setCursor(2, 0);
  lcd.print("V2 Centrifuge");
  lcd.setCursor(1, 1);
  lcd.print("Waiting for input...");
  
  pinMode(motor_gate_pin, OUTPUT);
  pinMode(comparator_pin, INPUT_PULLUP);
  
  Serial.begin(9600);
  while (!Serial);
  Serial.println("Welcome to V2 Centrifuge!");
  Serial.println("Enter RPM (max 1500):");

  attachInterrupt(digitalPinToInterrupt(comparator_pin), comparatorInterruptHandler, FALLING);
}

void loop() {
  unsigned long current_time = millis();

  if (state == WAITING) {
    lcd.setCursor(0, 2);
    lcd.print("Enter RPM & Time  ");
    analogWrite(motor_gate_pin, 0);

    if (Serial.available() > 0) {
      set_RPM = Serial.parseFloat();
      Serial.print("Target RPM: ");
      Serial.println(set_RPM);

      while (Serial.available() > 0) Serial.read();
      Serial.println("Enter time (max 600s):");

      while (true) {
        while (Serial.available() == 0) delay(50);
        String timeStr = Serial.readStringUntil('\n');
        timeStr.trim();
        duration = timeStr.toFloat();
        if (duration > 0) break;
        Serial.println("Invalid input. Enter a positive time:");
      }

      Serial.print("Time: ");
      Serial.print(duration);
      Serial.println(" seconds");
      duration *= 1000;

      baseline_duty = (set_RPM / max_RPM) * 255;
      ramp_up_start_time = millis();
      integral = 0;
      previous_error = 0;
      noInterrupts();
      comparator_counter = 0;
      comparator_counter_previous = 0;
      interrupts();
      
      state = RAMP_UP;
      Serial.println("Ramping up...");
      lcd.clear();
      lcd.setCursor(2, 0);
      lcd.print("Ramping Up...");
      analogWrite(motor_gate_pin, 255);
    }
  }
  else if (state == RAMP_UP) {
    if (current_time - ramp_up_start_time >= RAMP_UP_TIME) {
      noInterrupts();
      comparator_counter = 0;
      comparator_counter_previous = 0;
      interrupts();
      
      last_pid_time = current_time;
      start_time = current_time;
      state = RUNNING;
      Serial.println("Ramp-up complete!");
      lcd.clear();
      lcd.setCursor(3, 0);
      lcd.print("Running...");
      lcd.setCursor(0, 1);
      lcd.print("Target RPM: ");
      lcd.print(set_RPM);
      lcd.setCursor(0, 2);
      lcd.print("Time: ");
      lcd.print(duration / 1000);
      lcd.print(" sec ");
    }
  }
  else if (state == RUNNING) {
    if (current_time - start_time >= duration) {
      state = RAMP_DOWN;
      Serial.println("Time's up! Ramping down...");
      lcd.clear();
      lcd.setCursor(3, 0);
      lcd.print("Ramping Down...");
    }
    else if (current_time - last_pid_time >= comparator_sample_interval) {
      noInterrupts();
      int pulses = comparator_counter - comparator_counter_previous;
      comparator_counter_previous = comparator_counter;
      interrupts();

      float elapsed_time = (float)(current_time - last_pid_time);
      measured_RPM = (pulses / magnet) * (60000.0 / elapsed_time);
      float dt = elapsed_time / 1000.0;
      error = set_RPM - measured_RPM;
      integral += error * dt;
      if (integral > INTEGRAL_CLAMP) integral = INTEGRAL_CLAMP;
      if (integral < -INTEGRAL_CLAMP) integral = -INTEGRAL_CLAMP;
      derivative = (error - previous_error) / dt;
      previous_error = error;
      pid_output = (Kp * error) + (Ki * integral) + (Kd * derivative);
      pwm_value = baseline_duty + pid_output;
      if (pwm_value > 255) pwm_value = 255;
      if (pwm_value < 0) pwm_value = 0;
      analogWrite(motor_gate_pin, (int)pwm_value);

      Serial.print("Measured RPM: ");
      Serial.print(measured_RPM);
      Serial.print(" | PWM: ");
      Serial.println(pwm_value);
      
      lcd.setCursor(0, 1);
      lcd.print("RPM: ");
      lcd.print(measured_RPM);
      lcd.print("    "); 
      lcd.setCursor(0, 2);
      lcd.print("PWM: ");
      lcd.print((int)pwm_value);
      lcd.print("    ");

      last_pid_time = current_time;
    }
  }
  else if (state == RAMP_DOWN) {
    analogWrite(motor_gate_pin, 0);
    Serial.println("Centrifugation complete.");
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Done!");
    lcd.setCursor(2, 1);
    lcd.print("Good work team!");
    delay(2000);
    state = WAITING;
    Serial.println("Enter RPM (max 1500):");
    lcd.clear();
    lcd.setCursor(2, 0);
    lcd.print("V2 Centrifuge");
    lcd.setCursor(1, 1);
    lcd.print("Waiting for input...");
  }
}
